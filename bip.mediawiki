<pre>
  BIP: 
  Layer: Applications
  Title: Formosa --- Mnemonic sentences for generating deterministic keys
  Author: Yuri S Villas Boas <yuri@t3infosecurity.com>
          André Fidencio Gonçalves <andre7c4@gmail.com>
  Comments-Summary: 
  Comments-URI: 
  Status: 
  Type: Standards Track
  Created: 2021-12-10
</pre>

==Abstract==

This BIP is an expansion on the widely accepted BIP39, changing from semantically 
and syntactically disconnected words to sentences with simple, regular syntactic
structure and a semantic memory block. The resulting sequence of words will bears 
all properties present in the original BIP39 plus a huge hedge in efficiency defined 
as the ratio of bits of cryptographic entropy by required effort to memorize them.

Just like BIP39, It consists of two parts: generating the mnemonic and converting 
it into a binary seed. This seed can be later used to generate deterministic wallets 
using BIP-0032 or similar methods.

Since our work builds upon the original BIP39, many important parts of our technical 
description will completely coincide with that of BIP39, and as a consequence, some 
excerpts of this document will be verbatim transcriptions of those of BIP39.

==Motivation==

Same as in BIP39. Human memory is complex process that neuroscience has barely 
begun to strach. Suffice to say that (...), in order to better memorize something, 
humans need to associate the object of memory to previously memorized information.

Building upon the great work laid down by the BIP39 authors, we present a system 
for encoding information into alphabets of symbols, in our case, words forming 
actual sentences, that are, therefore even more easily associable with knowledge
a human memory will already have.

Again, like before, this guide is meant to be a way to transport computer-generated 
randomness with a human-readable transcription. It's not a way to process user-created
sentences (also known as brainwallets) into a wallet seed.

==Rationale==

The case for this format is very simple: 
# It keeps all BIP39 properties, specifically:
## every 33 bits is checksum;
## information density: 11 bits every 4 unique first letters;
# It generalizes BIP39. Namely: the latter is a special case of the former;
# Legacy BIP39 users can seamlessly adopt any Formosa theme (and vice-versa) without need to change addresses, because key derivation sets backwards conversion of seed to the equivalent BIP39 as preliminary step;
# It's implementation in python is, in fact, very simple. With the possible exception of chekcsum (SHA256, likewise BIP39) it can be manually done by rolling dice and looking up a large paper table; Finally, all those properties being observed;
# Its seeds that are much easier to memorize.

An objection that is slightly harder to counter has to do with 
knowledge-based authentication incurring in ''higher vulnerability 
to coercion''. Without having to enter the rabbit hole of coercion 
resistance in self custody without obscurity, we can respond that 
simply by noting that, unless the proposal is strict possession-
based authentication, a hardware wallet will also need a good PIN, 
and Formosa definitely a great password format as (just like and 
more so than BIP39), nothing requires it to be used specifically 
as a BTC seed and not as password.

Finally, there is the objection that a system like it might induce 
''over-customization'' which would go against the idea of using BIP's 
to define standards. To that I respond that BIP39 too has, in its 
documentation, instructions on how to create your own 2048-words 
dictionary, and yet, experience shows that the vast majority of real 
use cases just fall back to the default standard English word list.

==Generating the mnemonic==

The mnemonic must encode entropy in a multiple of 32 bits. With more entropy
security is improved but the sentence length increases. We refer to the
initial entropy length as ENT. The allowed size of ENT is 128-256 bits.

First, an initial entropy of ENT bits is generated. A checksum is generated by
taking the first <code>ENT / 32</code> bits of its SHA256 hash. This checksum is
appended to the end of the initial entropy. Next, in BIP39, these concatenated 
bits are split into groups of 11 bits, each encoding a number from 0-2047, serving
as an index into a wordlist. Formosa generalizes it by establishing sentences of 
33 bits each, that allow arbitrary subdivision into categories of varying sizes. 
Additionally, the alphabets (aka dictionaries) of possible words for each category 
may vary according to previously determined words to allow for finer semantic 
coherence. Finally, like in BIP39, we convert these numbers into words and
use the joined words as a mnemonic sentence.

The following table describes the relation between the initial entropy
length (ENT), the checksum length (CS), and the length of the generated mnemonic
sentence (MS) in words.

<pre>
CS = ENT / 32
MS = (ENT + CS) / 11

|  ENT  | CS | ENT+CS |  MS  |
+-------+----+--------+------+
|  128  |  4 |   132  |  12  |
|  160  |  5 |   165  |  15  |
|  192  |  6 |   198  |  18  |
|  224  |  7 |   231  |  21  |
|  256  |  8 |   264  |  24  |
</pre>

==Themes==

The Formosa equivalent to a BIP39 dictionary, hence 'theme' should aim at the following characteristics:

# '''specific semantic scope, aka memory block''' the entire vocabulary should be adherent to a certain topic or theme;
# '''avoid abstract syntax / morphology''' cathegories should consist of elements easily associable to mental images, even without context. Thumb rule is to resort only to nouns and adjectives;
# '''sorted wordlists''' just like in BIP39 (or, in general), that imparts performance enhancement for software
and human usage;
# '''first-letters unicity''' aim at having words of each list not having first few letters in common with any other. Our experience suggests that good figures would be first-2-letters uniqueness for lists of 64 or 128 elements. That yield information densities higher than that of BIP39 of 11/4 = 2.75. The following are upsides associated to maximizing this metric:
## '''more efficient muscle-memorization of password typing''';
## '''faster password typing for the same given strength''';
## '''more cryptographic strength in a given limited number of characters allowed for a passwrod'''.

==From mnemonic to seed==

<!-- A user may decide to protect their mnemonic with a passphrase. If a passphrase is not
present, an empty string "" is used instead.

To create a binary seed from the mnemonic, we use the PBKDF2 function with a mnemonic
sentence (in UTF-8 NFKD) used as the password and the string "mnemonic" + passphrase (again
in UTF-8 NFKD) used as the salt. The iteration count is set to 2048 and HMAC-SHA512 is used as
the pseudo-random function. The length of the derived key is 512 bits (= 64 bytes).

This seed can be later used to generate deterministic wallets using BIP-0032 or
similar methods.

The conversion of the mnemonic sentence to a binary seed is completely independent
from generating the sentence. This results in a rather simple code; there are no
constraints on sentence structure and clients are free to implement their own
wordlists or even whole sentence generators, allowing for flexibility in wordlists
for typo detection or other purposes.

Although using a mnemonic not generated by the algorithm described in "Generating the
mnemonic" section is possible, this is not advised and software must compute a
checksum for the mnemonic sentence using a wordlist and issue a warning if it is
invalid.

The described method also provides plausible deniability, because every passphrase
generates a valid seed (and thus a deterministic wallet) but only the correct one
will make the desired wallet available.
 -->
 
==Custom Themes==

Likewise in BIP39, adoption of non-standard themes is '''strongly discouraed'''. 
The following risks are associated to that, particularly for users lacking training in 
IT skills:
# imposes the responsibility to make sure correct theme file will be available under the risk of catastrophic deadlock;
# risk of custom theme being buggy or lacking one or more aforementioned security or UX properties;
# risk of compatibility bug;

On the other hand, users with propert training who understand well what they are doing 
may obtain the following benefits:
# higher memorization efficiency;
# extra layer of obscurity / steganography;

==Reference Implementation==

Reference implementation including wordlists is available from

https://github.com/Yuri-SVB/formosa/
